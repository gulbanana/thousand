@using System.IO
@using Thousand.Render
@code {
    [Parameter] public OutputMode Mode { get; set; }
    [Parameter] public Layout.Diagram Diagram { get; set; }
    [Parameter] public GenerationError[] Errors { get; set; }
    string dataURL;
    MarkupString? innerSVG;
    string[] errors;

    protected override void OnParametersSet()
    {
        errors = Errors?.Select(e => e.ToString())?.ToArray() ?? Array.Empty<string>();

        if (Diagram != null)
        {
            try
            {
                switch (Mode)
                {
                    case OutputMode.SkiaSharp:
                    { 
                        innerSVG = null;

                        using var renderer = new SkiaRenderer();
                        var image = renderer.Render(Diagram);
                        using (var stream = new MemoryStream())
                        {
                            image.Encode().SaveTo(stream);
                            var base64 = Convert.ToBase64String(stream.ToArray());

                            dataURL = "data:image/png;base64," + base64;
                        }

                        break;
                    }

                    case OutputMode.SVG:
                    { 
                        dataURL = null;

                        using var renderer = new SVGRenderer(false);
                        var text = renderer.Render(Diagram);
                        innerSVG = new(text.ToString());

                        break;
                    }
                }
            }
            catch (Exception e)
            {
                errors = errors.Append(e.Message).ToArray();
            }
        }
    }
}

<div class="layout">
    @if (dataURL != null)
    {
        <img src="@dataURL" />
    }
    else if (innerSVG.HasValue)
    {
        @innerSVG.Value
    }

    @if (errors.Any())
    {
        <div class="overlay">
            @foreach (var error in errors)
            {
                <p>@error</p>
            }
        </div>
    }
</div>