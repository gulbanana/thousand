@using BlazorMonaco
@using BlazorMonaco.Editor
@rendermode InteractiveServer
@inject IJSRuntime JS
@code {
    [Parameter] public string Source { get; set; }
    [Parameter] public EventCallback<string> SourceChanged { get; set; }
    [Parameter] public GenerationError[] Errors { get; set; }

    private StandaloneCodeEditor editor;
    private string source;
    private string[] decorations = Array.Empty<string>();

    private StandaloneEditorConstructionOptions CreateOptions(StandaloneCodeEditor editor)
    {
        this.editor = editor;
        this.source = Source;

        return new StandaloneEditorConstructionOptions
        {
            Language = "thousand",
            Theme = "vs",
            Value = Source,
            AutomaticLayout = true,
            ScrollBeyondLastLine = false,
            Minimap = new EditorMinimapOptions
            {
                Enabled = false
            },
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("registerLanguage");
        }
    }

    private bool decorating;
    protected override async Task OnParametersSetAsync()
    {
        if (!Source.Equals(source) && editor != null)
        {
            await editor.SetValue(Source);
            source = Source;
        }

        if (!decorating && editor != null)
        {
            decorating = true;
            var newDecorations = Errors.Select(ge => new ModelDeltaDecoration
            {
                Range = ge.Span.Position.HasValue ? new BlazorMonaco.Range(ge.Span.Position.Line, ge.Span.Position.Column, ge.Span.Position.Line, ge.Span.Position.Column + ge.Span.Length) : new BlazorMonaco.Range(1, 1, 1, 1),
                Options = new ModelDecorationOptions
                {
                    IsWholeLine = !ge.Span.Position.HasValue,
                    InlineClassName = "source-error",
                    HoverMessage = new MarkdownString[] { new() { IsTrusted = true, Value = $"{ge.Kind} error: {ge.Message}." } }
                }
            }).ToArray();

            decorations = await editor.DeltaDecorations(decorations, newDecorations);
            decorating = false;
        }
    }

    private async Task ModelContentChanged(ModelContentChangedEvent e)
    {
        source = await editor.GetValue();
        await SourceChanged.InvokeAsync(source);
    }
}

<StandaloneCodeEditor ConstructionOptions="CreateOptions" OnDidChangeModelContent="ModelContentChanged" />